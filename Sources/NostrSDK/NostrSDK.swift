// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(nostr_sdkFFI)
import nostr_sdkFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_nostr_sdk_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_nostr_sdk_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_PANIC: Int8 = 2

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: nil)
}

private func rustCallWithError<T>(
    _ errorHandler: @escaping (RustBuffer) throws -> Error,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_PANIC:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Public interface members begin here.


fileprivate struct FfiConverterUInt8: FfiConverterPrimitive {
    typealias FfiType = UInt8
    typealias SwiftType = UInt8

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt8 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: UInt8, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

fileprivate struct FfiConverterDuration: FfiConverterRustBuffer {
    typealias SwiftType = TimeInterval

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TimeInterval {
        let seconds: UInt64 = try readInt(&buf)
        let nanoseconds: UInt32 = try readInt(&buf)
        return Double(seconds) + (Double(nanoseconds) / 1.0e9)
    }

    public static func write(_ value: TimeInterval, into buf: inout [UInt8]) {
        if value.rounded(.down) > Double(Int64.max) {
            fatalError("Duration overflow, exceeds max bounds supported by Uniffi")
        }

        if value < 0 {
            fatalError("Invalid duration, must be non-negative")
        }

        let seconds = UInt64(value)
        let nanoseconds = UInt32((value - Double(seconds)) * 1.0e9)
        writeInt(&buf, seconds)
        writeInt(&buf, nanoseconds)
    }
}


public protocol AccountMetadataProtocol {
    func `name`(`name`: String)   -> AccountMetadata
    func `displayName`(`displayName`: String)   -> AccountMetadata
    func `about`(`about`: String)   -> AccountMetadata
    func `picture`(`picture`: String)  throws -> AccountMetadata
    func `nip05`(`nip05`: String)   -> AccountMetadata
    
}

public class AccountMetadata: AccountMetadataProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }
    public convenience init()  {
        self.init(unsafeFromRawPointer: try! rustCall() {
    uniffi_nostr_sdk_fn_constructor_accountmetadata_new($0)
})
    }

    deinit {
        try! rustCall { uniffi_nostr_sdk_fn_free_accountmetadata(pointer, $0) }
    }

    

    
    

    public func `name`(`name`: String)  -> AccountMetadata {
        return try!  FfiConverterTypeAccountMetadata.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_fn_method_accountmetadata_name(self.pointer, 
        FfiConverterString.lower(`name`),$0
    )
}
        )
    }

    public func `displayName`(`displayName`: String)  -> AccountMetadata {
        return try!  FfiConverterTypeAccountMetadata.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_fn_method_accountmetadata_display_name(self.pointer, 
        FfiConverterString.lower(`displayName`),$0
    )
}
        )
    }

    public func `about`(`about`: String)  -> AccountMetadata {
        return try!  FfiConverterTypeAccountMetadata.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_fn_method_accountmetadata_about(self.pointer, 
        FfiConverterString.lower(`about`),$0
    )
}
        )
    }

    public func `picture`(`picture`: String) throws -> AccountMetadata {
        return try  FfiConverterTypeAccountMetadata.lift(
            try 
    rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_sdk_fn_method_accountmetadata_picture(self.pointer, 
        FfiConverterString.lower(`picture`),$0
    )
}
        )
    }

    public func `nip05`(`nip05`: String)  -> AccountMetadata {
        return try!  FfiConverterTypeAccountMetadata.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_fn_method_accountmetadata_nip05(self.pointer, 
        FfiConverterString.lower(`nip05`),$0
    )
}
        )
    }
}

public struct FfiConverterTypeAccountMetadata: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = AccountMetadata

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AccountMetadata {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: AccountMetadata, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> AccountMetadata {
        return AccountMetadata(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: AccountMetadata) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}


public func FfiConverterTypeAccountMetadata_lift(_ pointer: UnsafeMutableRawPointer) throws -> AccountMetadata {
    return try FfiConverterTypeAccountMetadata.lift(pointer)
}

public func FfiConverterTypeAccountMetadata_lower(_ value: AccountMetadata) -> UnsafeMutableRawPointer {
    return FfiConverterTypeAccountMetadata.lower(value)
}


public protocol ClientProtocol {
    func `updateDifficulty`(`difficulty`: UInt8)  
    func `keys`()   -> Keys
    func `start`()  
    func `stop`()  throws
    func `isRunning`()   -> Bool
    func `shutdown`()  throws
    func `clearAlreadySeenEvents`()  
    func `addRelay`(`url`: String, `proxy`: String?)  throws
    func `removeRelay`(`url`: String)  throws
    func `connectRelay`(`url`: String)  throws
    func `disconnectRelay`(`url`: String)  throws
    func `connect`()  
    func `disconnect`()  throws
    func `subscribe`(`filters`: [Filter])  
    func `unsubscribe`()  
    func `getEventsOf`(`filters`: [Filter], `timeout`: TimeInterval?)  throws -> [Event]
    func `reqEventsOf`(`filters`: [Filter], `timeout`: TimeInterval?)  
    func `sendEvent`(`event`: Event)  throws -> String
    func `sendEventTo`(`url`: String, `event`: Event)  throws -> String
    func `handleNotifications`(`handler`: HandleNotification)  
    
}

public class Client: ClientProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }
    public convenience init(`keys`: Keys)  {
        self.init(unsafeFromRawPointer: try! rustCall() {
    uniffi_nostr_sdk_fn_constructor_client_new(
        FfiConverterTypeKeys.lower(`keys`),$0)
})
    }

    deinit {
        try! rustCall { uniffi_nostr_sdk_fn_free_client(pointer, $0) }
    }

    

    public static func `withOpts`(`keys`: Keys, `opts`: Options)  -> Client {
        return Client(unsafeFromRawPointer: try! rustCall() {
    uniffi_nostr_sdk_fn_constructor_client_with_opts(
        FfiConverterTypeKeys.lower(`keys`),
        FfiConverterTypeOptions.lower(`opts`),$0)
})
    }

    

    
    

    public func `updateDifficulty`(`difficulty`: UInt8)  {
        try! 
    rustCall() {
    
    uniffi_nostr_sdk_fn_method_client_update_difficulty(self.pointer, 
        FfiConverterUInt8.lower(`difficulty`),$0
    )
}
    }

    public func `keys`()  -> Keys {
        return try!  FfiConverterTypeKeys.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_fn_method_client_keys(self.pointer, $0
    )
}
        )
    }

    public func `start`()  {
        try! 
    rustCall() {
    
    uniffi_nostr_sdk_fn_method_client_start(self.pointer, $0
    )
}
    }

    public func `stop`() throws {
        try 
    rustCallWithError(FfiConverterTypeNostrSdkError.lift) {
    uniffi_nostr_sdk_fn_method_client_stop(self.pointer, $0
    )
}
    }

    public func `isRunning`()  -> Bool {
        return try!  FfiConverterBool.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_fn_method_client_is_running(self.pointer, $0
    )
}
        )
    }

    public func `shutdown`() throws {
        try 
    rustCallWithError(FfiConverterTypeNostrSdkError.lift) {
    uniffi_nostr_sdk_fn_method_client_shutdown(self.pointer, $0
    )
}
    }

    public func `clearAlreadySeenEvents`()  {
        try! 
    rustCall() {
    
    uniffi_nostr_sdk_fn_method_client_clear_already_seen_events(self.pointer, $0
    )
}
    }

    public func `addRelay`(`url`: String, `proxy`: String? = nil) throws {
        try 
    rustCallWithError(FfiConverterTypeNostrSdkError.lift) {
    uniffi_nostr_sdk_fn_method_client_add_relay(self.pointer, 
        FfiConverterString.lower(`url`),
        FfiConverterOptionString.lower(`proxy`),$0
    )
}
    }

    public func `removeRelay`(`url`: String) throws {
        try 
    rustCallWithError(FfiConverterTypeNostrSdkError.lift) {
    uniffi_nostr_sdk_fn_method_client_remove_relay(self.pointer, 
        FfiConverterString.lower(`url`),$0
    )
}
    }

    public func `connectRelay`(`url`: String) throws {
        try 
    rustCallWithError(FfiConverterTypeNostrSdkError.lift) {
    uniffi_nostr_sdk_fn_method_client_connect_relay(self.pointer, 
        FfiConverterString.lower(`url`),$0
    )
}
    }

    public func `disconnectRelay`(`url`: String) throws {
        try 
    rustCallWithError(FfiConverterTypeNostrSdkError.lift) {
    uniffi_nostr_sdk_fn_method_client_disconnect_relay(self.pointer, 
        FfiConverterString.lower(`url`),$0
    )
}
    }

    public func `connect`()  {
        try! 
    rustCall() {
    
    uniffi_nostr_sdk_fn_method_client_connect(self.pointer, $0
    )
}
    }

    public func `disconnect`() throws {
        try 
    rustCallWithError(FfiConverterTypeNostrSdkError.lift) {
    uniffi_nostr_sdk_fn_method_client_disconnect(self.pointer, $0
    )
}
    }

    public func `subscribe`(`filters`: [Filter])  {
        try! 
    rustCall() {
    
    uniffi_nostr_sdk_fn_method_client_subscribe(self.pointer, 
        FfiConverterSequenceTypeFilter.lower(`filters`),$0
    )
}
    }

    public func `unsubscribe`()  {
        try! 
    rustCall() {
    
    uniffi_nostr_sdk_fn_method_client_unsubscribe(self.pointer, $0
    )
}
    }

    public func `getEventsOf`(`filters`: [Filter], `timeout`: TimeInterval?) throws -> [Event] {
        return try  FfiConverterSequenceTypeEvent.lift(
            try 
    rustCallWithError(FfiConverterTypeNostrSdkError.lift) {
    uniffi_nostr_sdk_fn_method_client_get_events_of(self.pointer, 
        FfiConverterSequenceTypeFilter.lower(`filters`),
        FfiConverterOptionDuration.lower(`timeout`),$0
    )
}
        )
    }

    public func `reqEventsOf`(`filters`: [Filter], `timeout`: TimeInterval?)  {
        try! 
    rustCall() {
    
    uniffi_nostr_sdk_fn_method_client_req_events_of(self.pointer, 
        FfiConverterSequenceTypeFilter.lower(`filters`),
        FfiConverterOptionDuration.lower(`timeout`),$0
    )
}
    }

    public func `sendEvent`(`event`: Event) throws -> String {
        return try  FfiConverterString.lift(
            try 
    rustCallWithError(FfiConverterTypeNostrSdkError.lift) {
    uniffi_nostr_sdk_fn_method_client_send_event(self.pointer, 
        FfiConverterTypeEvent.lower(`event`),$0
    )
}
        )
    }

    public func `sendEventTo`(`url`: String, `event`: Event) throws -> String {
        return try  FfiConverterString.lift(
            try 
    rustCallWithError(FfiConverterTypeNostrSdkError.lift) {
    uniffi_nostr_sdk_fn_method_client_send_event_to(self.pointer, 
        FfiConverterString.lower(`url`),
        FfiConverterTypeEvent.lower(`event`),$0
    )
}
        )
    }

    public func `handleNotifications`(`handler`: HandleNotification)  {
        try! 
    rustCall() {
    
    uniffi_nostr_sdk_fn_method_client_handle_notifications(self.pointer, 
        FfiConverterCallbackInterfaceHandleNotification.lower(`handler`),$0
    )
}
    }
}

public struct FfiConverterTypeClient: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Client

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Client {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Client, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Client {
        return Client(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Client) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}


public func FfiConverterTypeClient_lift(_ pointer: UnsafeMutableRawPointer) throws -> Client {
    return try FfiConverterTypeClient.lift(pointer)
}

public func FfiConverterTypeClient_lower(_ value: Client) -> UnsafeMutableRawPointer {
    return FfiConverterTypeClient.lower(value)
}


public protocol ContactProtocol {
    func `alias`()   -> String?
    func `publicKey`()   -> String
    func `relayUrl`()   -> String?
    
}

public class Contact: ContactProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }
    public convenience init(`pk`: String, `relayUrl`: String? = nil, `alias`: String? = nil) throws {
        self.init(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_sdk_fn_constructor_contact_new(
        FfiConverterString.lower(`pk`),
        FfiConverterOptionString.lower(`relayUrl`),
        FfiConverterOptionString.lower(`alias`),$0)
})
    }

    deinit {
        try! rustCall { uniffi_nostr_sdk_fn_free_contact(pointer, $0) }
    }

    

    
    

    public func `alias`()  -> String? {
        return try!  FfiConverterOptionString.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_fn_method_contact_alias(self.pointer, $0
    )
}
        )
    }

    public func `publicKey`()  -> String {
        return try!  FfiConverterString.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_fn_method_contact_public_key(self.pointer, $0
    )
}
        )
    }

    public func `relayUrl`()  -> String? {
        return try!  FfiConverterOptionString.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_fn_method_contact_relay_url(self.pointer, $0
    )
}
        )
    }
}

public struct FfiConverterTypeContact: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Contact

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Contact {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Contact, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Contact {
        return Contact(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Contact) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}


public func FfiConverterTypeContact_lift(_ pointer: UnsafeMutableRawPointer) throws -> Contact {
    return try FfiConverterTypeContact.lift(pointer)
}

public func FfiConverterTypeContact_lower(_ value: Contact) -> UnsafeMutableRawPointer {
    return FfiConverterTypeContact.lower(value)
}


public protocol EventProtocol {
    func `pubkey`()   -> String
    func `kind`()   -> UInt64
    func `content`()   -> String
    func `verify`()   -> Bool
    func `asJson`()   -> String
    
}

public class Event: EventProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { uniffi_nostr_sdk_fn_free_event(pointer, $0) }
    }

    

    public static func `fromJson`(`json`: String) throws -> Event {
        return Event(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_sdk_fn_constructor_event_from_json(
        FfiConverterString.lower(`json`),$0)
})
    }

    

    
    

    public func `pubkey`()  -> String {
        return try!  FfiConverterString.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_fn_method_event_pubkey(self.pointer, $0
    )
}
        )
    }

    public func `kind`()  -> UInt64 {
        return try!  FfiConverterUInt64.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_fn_method_event_kind(self.pointer, $0
    )
}
        )
    }

    public func `content`()  -> String {
        return try!  FfiConverterString.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_fn_method_event_content(self.pointer, $0
    )
}
        )
    }

    public func `verify`()  -> Bool {
        return try!  FfiConverterBool.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_fn_method_event_verify(self.pointer, $0
    )
}
        )
    }

    public func `asJson`()  -> String {
        return try!  FfiConverterString.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_fn_method_event_as_json(self.pointer, $0
    )
}
        )
    }
}

public struct FfiConverterTypeEvent: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Event

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Event {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Event, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Event {
        return Event(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Event) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}


public func FfiConverterTypeEvent_lift(_ pointer: UnsafeMutableRawPointer) throws -> Event {
    return try FfiConverterTypeEvent.lift(pointer)
}

public func FfiConverterTypeEvent_lower(_ value: Event) -> UnsafeMutableRawPointer {
    return FfiConverterTypeEvent.lower(value)
}


public protocol EventBuilderProtocol {
    func `toEvent`(`keys`: Keys)  throws -> Event
    func `toPowEvent`(`keys`: Keys, `difficulty`: UInt8)  throws -> Event
    
}

public class EventBuilder: EventBuilderProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }
    public convenience init(`kind`: UInt64, `content`: String, `tags`: [[String]]) throws {
        self.init(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_sdk_fn_constructor_eventbuilder_new(
        FfiConverterUInt64.lower(`kind`),
        FfiConverterString.lower(`content`),
        FfiConverterSequenceSequenceString.lower(`tags`),$0)
})
    }

    deinit {
        try! rustCall { uniffi_nostr_sdk_fn_free_eventbuilder(pointer, $0) }
    }

    

    public static func `setMetadata`(`metadata`: AccountMetadata)  -> EventBuilder {
        return EventBuilder(unsafeFromRawPointer: try! rustCall() {
    uniffi_nostr_sdk_fn_constructor_eventbuilder_set_metadata(
        FfiConverterTypeAccountMetadata.lower(`metadata`),$0)
})
    }

    

    public static func `addRecommendedRelay`(`url`: String) throws -> EventBuilder {
        return EventBuilder(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_sdk_fn_constructor_eventbuilder_add_recommended_relay(
        FfiConverterString.lower(`url`),$0)
})
    }

    

    public static func `newTextNote`(`content`: String, `tags`: [[String]]) throws -> EventBuilder {
        return EventBuilder(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_sdk_fn_constructor_eventbuilder_new_text_note(
        FfiConverterString.lower(`content`),
        FfiConverterSequenceSequenceString.lower(`tags`),$0)
})
    }

    

    public static func `longFormTextNote`(`content`: String, `tags`: [[String]]) throws -> EventBuilder {
        return EventBuilder(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_sdk_fn_constructor_eventbuilder_long_form_text_note(
        FfiConverterString.lower(`content`),
        FfiConverterSequenceSequenceString.lower(`tags`),$0)
})
    }

    

    public static func `repost`(`eventId`: String, `publicKey`: String) throws -> EventBuilder {
        return EventBuilder(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_sdk_fn_constructor_eventbuilder_repost(
        FfiConverterString.lower(`eventId`),
        FfiConverterString.lower(`publicKey`),$0)
})
    }

    

    public static func `setContactList`(`list`: [Contact])  -> EventBuilder {
        return EventBuilder(unsafeFromRawPointer: try! rustCall() {
    uniffi_nostr_sdk_fn_constructor_eventbuilder_set_contact_list(
        FfiConverterSequenceTypeContact.lower(`list`),$0)
})
    }

    

    public static func `newEncryptedDirectMsg`(`senderKeys`: Keys, `receiverPubkey`: String, `content`: String) throws -> EventBuilder {
        return EventBuilder(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_sdk_fn_constructor_eventbuilder_new_encrypted_direct_msg(
        FfiConverterTypeKeys.lower(`senderKeys`),
        FfiConverterString.lower(`receiverPubkey`),
        FfiConverterString.lower(`content`),$0)
})
    }

    

    public static func `delete`(`ids`: [String], `reason`: String? = nil) throws -> EventBuilder {
        return EventBuilder(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_sdk_fn_constructor_eventbuilder_delete(
        FfiConverterSequenceString.lower(`ids`),
        FfiConverterOptionString.lower(`reason`),$0)
})
    }

    

    public static func `newReaction`(`eventId`: String, `publicKey`: String, `content`: String) throws -> EventBuilder {
        return EventBuilder(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_sdk_fn_constructor_eventbuilder_new_reaction(
        FfiConverterString.lower(`eventId`),
        FfiConverterString.lower(`publicKey`),
        FfiConverterString.lower(`content`),$0)
})
    }

    

    public static func `newChannel`(`metadata`: AccountMetadata)  -> EventBuilder {
        return EventBuilder(unsafeFromRawPointer: try! rustCall() {
    uniffi_nostr_sdk_fn_constructor_eventbuilder_new_channel(
        FfiConverterTypeAccountMetadata.lower(`metadata`),$0)
})
    }

    

    public static func `setChannelMetadata`(`channelId`: String, `relayUrl`: String?, `metadata`: AccountMetadata) throws -> EventBuilder {
        return EventBuilder(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_sdk_fn_constructor_eventbuilder_set_channel_metadata(
        FfiConverterString.lower(`channelId`),
        FfiConverterOptionString.lower(`relayUrl`),
        FfiConverterTypeAccountMetadata.lower(`metadata`),$0)
})
    }

    

    public static func `newChannelMsg`(`channelId`: String, `relayUrl`: String, `content`: String) throws -> EventBuilder {
        return EventBuilder(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_sdk_fn_constructor_eventbuilder_new_channel_msg(
        FfiConverterString.lower(`channelId`),
        FfiConverterString.lower(`relayUrl`),
        FfiConverterString.lower(`content`),$0)
})
    }

    

    public static func `hideChannelMsg`(`messageId`: String, `reason`: String?) throws -> EventBuilder {
        return EventBuilder(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_sdk_fn_constructor_eventbuilder_hide_channel_msg(
        FfiConverterString.lower(`messageId`),
        FfiConverterOptionString.lower(`reason`),$0)
})
    }

    

    public static func `muteChannelUser`(`publicKey`: String, `reason`: String?) throws -> EventBuilder {
        return EventBuilder(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_sdk_fn_constructor_eventbuilder_mute_channel_user(
        FfiConverterString.lower(`publicKey`),
        FfiConverterOptionString.lower(`reason`),$0)
})
    }

    

    public static func `auth`(`challenge`: String, `relayUrl`: String) throws -> EventBuilder {
        return EventBuilder(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_sdk_fn_constructor_eventbuilder_auth(
        FfiConverterString.lower(`challenge`),
        FfiConverterString.lower(`relayUrl`),$0)
})
    }

    

    
    

    public func `toEvent`(`keys`: Keys) throws -> Event {
        return try  FfiConverterTypeEvent.lift(
            try 
    rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_sdk_fn_method_eventbuilder_to_event(self.pointer, 
        FfiConverterTypeKeys.lower(`keys`),$0
    )
}
        )
    }

    public func `toPowEvent`(`keys`: Keys, `difficulty`: UInt8) throws -> Event {
        return try  FfiConverterTypeEvent.lift(
            try 
    rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_sdk_fn_method_eventbuilder_to_pow_event(self.pointer, 
        FfiConverterTypeKeys.lower(`keys`),
        FfiConverterUInt8.lower(`difficulty`),$0
    )
}
        )
    }
}

public struct FfiConverterTypeEventBuilder: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = EventBuilder

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> EventBuilder {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: EventBuilder, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> EventBuilder {
        return EventBuilder(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: EventBuilder) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}


public func FfiConverterTypeEventBuilder_lift(_ pointer: UnsafeMutableRawPointer) throws -> EventBuilder {
    return try FfiConverterTypeEventBuilder.lift(pointer)
}

public func FfiConverterTypeEventBuilder_lower(_ value: EventBuilder) -> UnsafeMutableRawPointer {
    return FfiConverterTypeEventBuilder.lower(value)
}


public protocol FilterProtocol {
    func `id`(`id`: String)  throws -> Filter
    func `ids`(`ids`: [String])  throws -> Filter
    func `kind`(`kind`: UInt64)   -> Filter
    func `event`(`eventId`: String)  throws -> Filter
    func `pubkey`(`pubkey`: String)  throws -> Filter
    func `since`(`timestamp`: UInt64)   -> Filter
    func `until`(`timestamp`: UInt64)   -> Filter
    func `authors`(`authors`: [String])  throws -> Filter
    
}

public class Filter: FilterProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }
    public convenience init()  {
        self.init(unsafeFromRawPointer: try! rustCall() {
    uniffi_nostr_sdk_fn_constructor_filter_new($0)
})
    }

    deinit {
        try! rustCall { uniffi_nostr_sdk_fn_free_filter(pointer, $0) }
    }

    

    
    

    public func `id`(`id`: String) throws -> Filter {
        return try  FfiConverterTypeFilter.lift(
            try 
    rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_sdk_fn_method_filter_id(self.pointer, 
        FfiConverterString.lower(`id`),$0
    )
}
        )
    }

    public func `ids`(`ids`: [String]) throws -> Filter {
        return try  FfiConverterTypeFilter.lift(
            try 
    rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_sdk_fn_method_filter_ids(self.pointer, 
        FfiConverterSequenceString.lower(`ids`),$0
    )
}
        )
    }

    public func `kind`(`kind`: UInt64)  -> Filter {
        return try!  FfiConverterTypeFilter.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_fn_method_filter_kind(self.pointer, 
        FfiConverterUInt64.lower(`kind`),$0
    )
}
        )
    }

    public func `event`(`eventId`: String) throws -> Filter {
        return try  FfiConverterTypeFilter.lift(
            try 
    rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_sdk_fn_method_filter_event(self.pointer, 
        FfiConverterString.lower(`eventId`),$0
    )
}
        )
    }

    public func `pubkey`(`pubkey`: String) throws -> Filter {
        return try  FfiConverterTypeFilter.lift(
            try 
    rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_sdk_fn_method_filter_pubkey(self.pointer, 
        FfiConverterString.lower(`pubkey`),$0
    )
}
        )
    }

    public func `since`(`timestamp`: UInt64)  -> Filter {
        return try!  FfiConverterTypeFilter.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_fn_method_filter_since(self.pointer, 
        FfiConverterUInt64.lower(`timestamp`),$0
    )
}
        )
    }

    public func `until`(`timestamp`: UInt64)  -> Filter {
        return try!  FfiConverterTypeFilter.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_fn_method_filter_until(self.pointer, 
        FfiConverterUInt64.lower(`timestamp`),$0
    )
}
        )
    }

    public func `authors`(`authors`: [String]) throws -> Filter {
        return try  FfiConverterTypeFilter.lift(
            try 
    rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_sdk_fn_method_filter_authors(self.pointer, 
        FfiConverterSequenceString.lower(`authors`),$0
    )
}
        )
    }
}

public struct FfiConverterTypeFilter: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Filter

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Filter {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Filter, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Filter {
        return Filter(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Filter) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}


public func FfiConverterTypeFilter_lift(_ pointer: UnsafeMutableRawPointer) throws -> Filter {
    return try FfiConverterTypeFilter.lift(pointer)
}

public func FfiConverterTypeFilter_lower(_ value: Filter) -> UnsafeMutableRawPointer {
    return FfiConverterTypeFilter.lower(value)
}


public protocol KeysProtocol {
    func `publicKey`()   -> String
    func `publicKeyBech32`()  throws -> String
    func `secretKey`()  throws -> String
    func `secretKeyBech32`()  throws -> String
    
}

public class Keys: KeysProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }
    public convenience init(`sk`: String) throws {
        self.init(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_sdk_fn_constructor_keys_new(
        FfiConverterString.lower(`sk`),$0)
})
    }

    deinit {
        try! rustCall { uniffi_nostr_sdk_fn_free_keys(pointer, $0) }
    }

    

    public static func `fromPublicKey`(`pk`: String) throws -> Keys {
        return Keys(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_sdk_fn_constructor_keys_from_public_key(
        FfiConverterString.lower(`pk`),$0)
})
    }

    

    public static func `fromBech32PublicKey`(`pk`: String) throws -> Keys {
        return Keys(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_sdk_fn_constructor_keys_from_bech32_public_key(
        FfiConverterString.lower(`pk`),$0)
})
    }

    

    public static func `fromBech32`(`sk`: String) throws -> Keys {
        return Keys(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_sdk_fn_constructor_keys_from_bech32(
        FfiConverterString.lower(`sk`),$0)
})
    }

    

    public static func `generate`()  -> Keys {
        return Keys(unsafeFromRawPointer: try! rustCall() {
    uniffi_nostr_sdk_fn_constructor_keys_generate($0)
})
    }

    

    public static func `fromMnemonic`(`mnemonic`: String, `passphrase`: String? = nil) throws -> Keys {
        return Keys(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_sdk_fn_constructor_keys_from_mnemonic(
        FfiConverterString.lower(`mnemonic`),
        FfiConverterOptionString.lower(`passphrase`),$0)
})
    }

    

    
    

    public func `publicKey`()  -> String {
        return try!  FfiConverterString.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_fn_method_keys_public_key(self.pointer, $0
    )
}
        )
    }

    public func `publicKeyBech32`() throws -> String {
        return try  FfiConverterString.lift(
            try 
    rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_sdk_fn_method_keys_public_key_bech32(self.pointer, $0
    )
}
        )
    }

    public func `secretKey`() throws -> String {
        return try  FfiConverterString.lift(
            try 
    rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_sdk_fn_method_keys_secret_key(self.pointer, $0
    )
}
        )
    }

    public func `secretKeyBech32`() throws -> String {
        return try  FfiConverterString.lift(
            try 
    rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_sdk_fn_method_keys_secret_key_bech32(self.pointer, $0
    )
}
        )
    }
}

public struct FfiConverterTypeKeys: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Keys

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Keys {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Keys, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Keys {
        return Keys(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Keys) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}


public func FfiConverterTypeKeys_lift(_ pointer: UnsafeMutableRawPointer) throws -> Keys {
    return try FfiConverterTypeKeys.lift(pointer)
}

public func FfiConverterTypeKeys_lower(_ value: Keys) -> UnsafeMutableRawPointer {
    return FfiConverterTypeKeys.lower(value)
}


public protocol OptionsProtocol {
    func `waitForConnection`(`wait`: Bool)   -> Options
    func `waitForSend`(`wait`: Bool)   -> Options
    func `waitForSubscription`(`wait`: Bool)   -> Options
    func `difficulty`(`difficulty`: UInt8)   -> Options
    func `reqFiltersChunkSize`(`reqFiltersChunkSize`: UInt8)   -> Options
    func `timeout`(`timeout`: TimeInterval?)   -> Options
    func `sendTimeout`(`sendTimeout`: TimeInterval?)   -> Options
    func `nip46Timeout`(`nip46Timeout`: TimeInterval?)   -> Options
    
}

public class Options: OptionsProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }
    public convenience init()  {
        self.init(unsafeFromRawPointer: try! rustCall() {
    uniffi_nostr_sdk_fn_constructor_options_new($0)
})
    }

    deinit {
        try! rustCall { uniffi_nostr_sdk_fn_free_options(pointer, $0) }
    }

    

    
    

    public func `waitForConnection`(`wait`: Bool)  -> Options {
        return try!  FfiConverterTypeOptions.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_fn_method_options_wait_for_connection(self.pointer, 
        FfiConverterBool.lower(`wait`),$0
    )
}
        )
    }

    public func `waitForSend`(`wait`: Bool)  -> Options {
        return try!  FfiConverterTypeOptions.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_fn_method_options_wait_for_send(self.pointer, 
        FfiConverterBool.lower(`wait`),$0
    )
}
        )
    }

    public func `waitForSubscription`(`wait`: Bool)  -> Options {
        return try!  FfiConverterTypeOptions.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_fn_method_options_wait_for_subscription(self.pointer, 
        FfiConverterBool.lower(`wait`),$0
    )
}
        )
    }

    public func `difficulty`(`difficulty`: UInt8)  -> Options {
        return try!  FfiConverterTypeOptions.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_fn_method_options_difficulty(self.pointer, 
        FfiConverterUInt8.lower(`difficulty`),$0
    )
}
        )
    }

    public func `reqFiltersChunkSize`(`reqFiltersChunkSize`: UInt8)  -> Options {
        return try!  FfiConverterTypeOptions.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_fn_method_options_req_filters_chunk_size(self.pointer, 
        FfiConverterUInt8.lower(`reqFiltersChunkSize`),$0
    )
}
        )
    }

    public func `timeout`(`timeout`: TimeInterval?)  -> Options {
        return try!  FfiConverterTypeOptions.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_fn_method_options_timeout(self.pointer, 
        FfiConverterOptionDuration.lower(`timeout`),$0
    )
}
        )
    }

    public func `sendTimeout`(`sendTimeout`: TimeInterval?)  -> Options {
        return try!  FfiConverterTypeOptions.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_fn_method_options_send_timeout(self.pointer, 
        FfiConverterOptionDuration.lower(`sendTimeout`),$0
    )
}
        )
    }

    public func `nip46Timeout`(`nip46Timeout`: TimeInterval?)  -> Options {
        return try!  FfiConverterTypeOptions.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_fn_method_options_nip46_timeout(self.pointer, 
        FfiConverterOptionDuration.lower(`nip46Timeout`),$0
    )
}
        )
    }
}

public struct FfiConverterTypeOptions: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Options

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Options {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Options, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Options {
        return Options(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Options) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}


public func FfiConverterTypeOptions_lift(_ pointer: UnsafeMutableRawPointer) throws -> Options {
    return try FfiConverterTypeOptions.lift(pointer)
}

public func FfiConverterTypeOptions_lower(_ value: Options) -> UnsafeMutableRawPointer {
    return FfiConverterTypeOptions.lower(value)
}

public enum NostrError {

    
    
    case Generic(`err`: String)

    fileprivate static func uniffiErrorHandler(_ error: RustBuffer) throws -> Error {
        return try FfiConverterTypeNostrError.lift(error)
    }
}


public struct FfiConverterTypeNostrError: FfiConverterRustBuffer {
    typealias SwiftType = NostrError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NostrError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .Generic(
            `err`: try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: NostrError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .Generic(`err`):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(`err`, into: &buf)
            
        }
    }
}


extension NostrError: Equatable, Hashable {}

extension NostrError: Error { }

public enum NostrSdkError {

    
    
    case Generic(`err`: String)

    fileprivate static func uniffiErrorHandler(_ error: RustBuffer) throws -> Error {
        return try FfiConverterTypeNostrSdkError.lift(error)
    }
}


public struct FfiConverterTypeNostrSdkError: FfiConverterRustBuffer {
    typealias SwiftType = NostrSdkError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NostrSdkError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .Generic(
            `err`: try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: NostrSdkError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .Generic(`err`):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(`err`, into: &buf)
            
        }
    }
}


extension NostrSdkError: Equatable, Hashable {}

extension NostrSdkError: Error { }

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate typealias UniFFICallbackHandle = UInt64
fileprivate class UniFFICallbackHandleMap<T> {
    private var leftMap: [UniFFICallbackHandle: T] = [:]
    private var counter: [UniFFICallbackHandle: UInt64] = [:]
    private var rightMap: [ObjectIdentifier: UniFFICallbackHandle] = [:]

    private let lock = NSLock()
    private var currentHandle: UniFFICallbackHandle = 0
    private let stride: UniFFICallbackHandle = 1

    func insert(obj: T) -> UniFFICallbackHandle {
        lock.withLock {
            let id = ObjectIdentifier(obj as AnyObject)
            let handle = rightMap[id] ?? {
                currentHandle += stride
                let handle = currentHandle
                leftMap[handle] = obj
                rightMap[id] = handle
                return handle
            }()
            counter[handle] = (counter[handle] ?? 0) + 1
            return handle
        }
    }

    func get(handle: UniFFICallbackHandle) -> T? {
        lock.withLock {
            leftMap[handle]
        }
    }

    func delete(handle: UniFFICallbackHandle) {
        remove(handle: handle)
    }

    @discardableResult
    func remove(handle: UniFFICallbackHandle) -> T? {
        lock.withLock {
            defer { counter[handle] = (counter[handle] ?? 1) - 1 }
            guard counter[handle] == 1 else { return leftMap[handle] }
            let obj = leftMap.removeValue(forKey: handle)
            if let obj = obj {
                rightMap.removeValue(forKey: ObjectIdentifier(obj as AnyObject))
            }
            return obj
        }
    }
}

// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
private let IDX_CALLBACK_FREE: Int32 = 0
// Callback return codes
private let UNIFFI_CALLBACK_SUCCESS: Int32 = 0
private let UNIFFI_CALLBACK_ERROR: Int32 = 1
private let UNIFFI_CALLBACK_UNEXPECTED_ERROR: Int32 = 2

// Declaration and FfiConverters for HandleNotification Callback Interface

public protocol HandleNotification : AnyObject {
    func `handle`(`relayUrl`: String, `event`: Event) 
    
}

// The ForeignCallback that is passed to Rust.
fileprivate let foreignCallbackCallbackInterfaceHandleNotification : ForeignCallback =
    { (handle: UniFFICallbackHandle, method: Int32, argsData: UnsafePointer<UInt8>, argsLen: Int32, out_buf: UnsafeMutablePointer<RustBuffer>) -> Int32 in
    

    func `invokeHandle`(_ swiftCallbackInterface: HandleNotification, _ argsData: UnsafePointer<UInt8>, _ argsLen: Int32, _ out_buf: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
        var reader = createReader(data: Data(bytes: argsData, count: Int(argsLen)))
        func makeCall() throws -> Int32 {
            try swiftCallbackInterface.`handle`(
                    `relayUrl`:  try FfiConverterString.read(from: &reader), 
                    `event`:  try FfiConverterTypeEvent.read(from: &reader)
                    )
            return UNIFFI_CALLBACK_SUCCESS
        }
        return try makeCall()
    }


    switch method {
        case IDX_CALLBACK_FREE:
            FfiConverterCallbackInterfaceHandleNotification.drop(handle: handle)
            // Sucessful return
            // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
            return UNIFFI_CALLBACK_SUCCESS
        case 1:
            let cb: HandleNotification
            do {
                cb = try FfiConverterCallbackInterfaceHandleNotification.lift(handle)
            } catch {
                out_buf.pointee = FfiConverterString.lower("HandleNotification: Invalid handle")
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
            do {
                return try `invokeHandle`(cb, argsData, argsLen, out_buf)
            } catch let error {
                out_buf.pointee = FfiConverterString.lower(String(describing: error))
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
        
        // This should never happen, because an out of bounds method index won't
        // ever be used. Once we can catch errors, we should return an InternalError.
        // https://github.com/mozilla/uniffi-rs/issues/351
        default:
            // An unexpected error happened.
            // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    }
}

// FfiConverter protocol for callback interfaces
fileprivate struct FfiConverterCallbackInterfaceHandleNotification {
    private static let initCallbackOnce: () = {
        // Swift ensures this initializer code will once run once, even when accessed by multiple threads.
        try! rustCall { (err: UnsafeMutablePointer<RustCallStatus>) in
            uniffi_nostr_sdk_fn_init_callback_handlenotification(foreignCallbackCallbackInterfaceHandleNotification, err)
        }
    }()

    private static func ensureCallbackinitialized() {
        _ = initCallbackOnce
    }

    static func drop(handle: UniFFICallbackHandle) {
        handleMap.remove(handle: handle)
    }

    private static var handleMap = UniFFICallbackHandleMap<HandleNotification>()
}

extension FfiConverterCallbackInterfaceHandleNotification : FfiConverter {
    typealias SwiftType = HandleNotification
    // We can use Handle as the FfiType because it's a typealias to UInt64
    typealias FfiType = UniFFICallbackHandle

    public static func lift(_ handle: UniFFICallbackHandle) throws -> SwiftType {
        ensureCallbackinitialized();
        guard let callback = handleMap.get(handle: handle) else {
            throw UniffiInternalError.unexpectedStaleHandle
        }
        return callback
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        ensureCallbackinitialized();
        let handle: UniFFICallbackHandle = try readInt(&buf)
        return try lift(handle)
    }

    public static func lower(_ v: SwiftType) -> UniFFICallbackHandle {
        ensureCallbackinitialized();
        return handleMap.insert(obj: v)
    }

    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        ensureCallbackinitialized();
        writeInt(&buf, lower(v))
    }
}

fileprivate struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionDuration: FfiConverterRustBuffer {
    typealias SwiftType = TimeInterval?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterDuration.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterDuration.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    public static func write(_ value: [String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String] {
        let len: Int32 = try readInt(&buf)
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterString.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeContact: FfiConverterRustBuffer {
    typealias SwiftType = [Contact]

    public static func write(_ value: [Contact], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeContact.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Contact] {
        let len: Int32 = try readInt(&buf)
        var seq = [Contact]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeContact.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeEvent: FfiConverterRustBuffer {
    typealias SwiftType = [Event]

    public static func write(_ value: [Event], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeEvent.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Event] {
        let len: Int32 = try readInt(&buf)
        var seq = [Event]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeEvent.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeFilter: FfiConverterRustBuffer {
    typealias SwiftType = [Filter]

    public static func write(_ value: [Filter], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeFilter.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Filter] {
        let len: Int32 = try readInt(&buf)
        var seq = [Filter]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeFilter.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [[String]]

    public static func write(_ value: [[String]], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterSequenceString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [[String]] {
        let len: Int32 = try readInt(&buf)
        var seq = [[String]]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterSequenceString.read(from: &buf))
        }
        return seq
    }
}

public func `nip04Encrypt`(`secretKey`: String, `publicKey`: String, `content`: String) throws -> String {
    return try  FfiConverterString.lift(
        try rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_sdk_fn_func_nip04_encrypt(
        FfiConverterString.lower(`secretKey`),
        FfiConverterString.lower(`publicKey`),
        FfiConverterString.lower(`content`),$0)
}
    )
}

public func `nip04Decrypt`(`secretKey`: String, `publicKey`: String, `encryptedContent`: String) throws -> String {
    return try  FfiConverterString.lift(
        try rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_sdk_fn_func_nip04_decrypt(
        FfiConverterString.lower(`secretKey`),
        FfiConverterString.lower(`publicKey`),
        FfiConverterString.lower(`encryptedContent`),$0)
}
    )
}

public func `initLogger`(`level`: String? = nil)  {
    try! rustCall() {
    uniffi_nostr_sdk_fn_func_init_logger(
        FfiConverterOptionString.lower(`level`),$0)
}
}



public func `timestamp`()  -> UInt64 {
    return try!  FfiConverterUInt64.lift(
        try! rustCall() {
    uniffi_nostr_sdk_fn_func_timestamp($0)
}
    )
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variables to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 22
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_nostr_sdk_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_nostr_sdk_checksum_func_nip04_encrypt() != 36161) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_func_nip04_decrypt() != 61635) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_func_init_logger() != 57668) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_func_timestamp() != 13516) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_method_keys_public_key() != 8008) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_method_keys_public_key_bech32() != 5014) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_method_keys_secret_key() != 20726) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_method_keys_secret_key_bech32() != 9035) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_method_filter_id() != 58951) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_method_filter_ids() != 43459) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_method_filter_kind() != 32792) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_method_filter_event() != 41110) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_method_filter_pubkey() != 885) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_method_filter_since() != 29494) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_method_filter_until() != 35046) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_method_filter_authors() != 37738) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_method_event_pubkey() != 21056) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_method_event_kind() != 9991) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_method_event_content() != 61289) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_method_event_verify() != 42880) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_method_event_as_json() != 26774) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_method_eventbuilder_to_event() != 47288) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_method_eventbuilder_to_pow_event() != 49016) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_method_contact_alias() != 7484) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_method_contact_public_key() != 9945) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_method_contact_relay_url() != 5572) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_method_accountmetadata_name() != 32146) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_method_accountmetadata_display_name() != 31496) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_method_accountmetadata_about() != 245) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_method_accountmetadata_picture() != 42395) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_method_accountmetadata_nip05() != 36375) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_method_options_wait_for_connection() != 64406) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_method_options_wait_for_send() != 50644) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_method_options_wait_for_subscription() != 54839) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_method_options_difficulty() != 55584) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_method_options_req_filters_chunk_size() != 32969) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_method_options_timeout() != 40520) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_method_options_send_timeout() != 46598) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_method_options_nip46_timeout() != 53514) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_method_client_update_difficulty() != 16293) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_method_client_keys() != 24602) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_method_client_start() != 34021) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_method_client_stop() != 23547) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_method_client_is_running() != 29603) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_method_client_shutdown() != 8409) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_method_client_clear_already_seen_events() != 13739) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_method_client_add_relay() != 46021) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_method_client_remove_relay() != 20000) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_method_client_connect_relay() != 44731) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_method_client_disconnect_relay() != 9298) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_method_client_connect() != 1786) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_method_client_disconnect() != 7794) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_method_client_subscribe() != 59977) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_method_client_unsubscribe() != 47263) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_method_client_get_events_of() != 39045) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_method_client_req_events_of() != 571) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_method_client_send_event() != 59776) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_method_client_send_event_to() != 48441) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_method_client_handle_notifications() != 6806) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_constructor_keys_new() != 6492) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_constructor_keys_from_public_key() != 23586) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_constructor_keys_from_bech32_public_key() != 13442) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_constructor_keys_from_bech32() != 24856) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_constructor_keys_generate() != 7127) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_constructor_keys_from_mnemonic() != 55257) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_constructor_filter_new() != 59121) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_constructor_event_from_json() != 40059) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_constructor_eventbuilder_new() != 5433) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_constructor_eventbuilder_set_metadata() != 50751) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_constructor_eventbuilder_add_recommended_relay() != 20155) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_constructor_eventbuilder_new_text_note() != 32743) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_constructor_eventbuilder_long_form_text_note() != 27538) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_constructor_eventbuilder_repost() != 62601) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_constructor_eventbuilder_set_contact_list() != 55954) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_constructor_eventbuilder_new_encrypted_direct_msg() != 48397) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_constructor_eventbuilder_delete() != 37795) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_constructor_eventbuilder_new_reaction() != 15533) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_constructor_eventbuilder_new_channel() != 14798) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_constructor_eventbuilder_set_channel_metadata() != 5534) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_constructor_eventbuilder_new_channel_msg() != 32541) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_constructor_eventbuilder_hide_channel_msg() != 20684) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_constructor_eventbuilder_mute_channel_user() != 28542) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_constructor_eventbuilder_auth() != 682) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_constructor_contact_new() != 20096) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_constructor_accountmetadata_new() != 65302) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_constructor_options_new() != 18345) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_constructor_client_new() != 40232) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_checksum_constructor_client_with_opts() != 52224) {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}